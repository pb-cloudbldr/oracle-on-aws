{
"AWSTemplateFormatVersion": "2010-09-09",
    "Description": "",
    "Metadata": {

    },
    "Parameters": {
		"domainName": {
			"Description": "Private domain for VPC",
			"Default" : "oracle.cloudbldr.uk",
			"Type": "String"
		},
		"AMI": {
			"Description": "Cloudbldr AMI for e-business suite",
			"Default" : "ami-0107fd7e5158b0161",
			"Type": "String"
        },
		"dbSize": {
			"Description": "instance class used for Database instance",
			"Default" : "t3.large",
			"Type": "String"
        },
		"dbStorage": {
			"Description": "Size of volume to attach for datafiles and binaries",
			"Default" : "100",
			"Type": "String"
        },
		"appSize": {
			"Description": "instance class used for Application instance",
			"Default" : "t3.large",
			"Type": "String"
        },
		"appStorage": {
			"Description": "Size of volume to attach for application",
			"Default" : "100",
			"Type": "String"
        },
		"hostnamePattern": {
			"Description": "Hostanme Pattern used on App and DB",
			"Default" : "cdvisd01",
			"Type": "String"
        },
		"VPCCIDR": {
			"Description" : "Class C start address for the VPC",
			"Default" : "10.20.32.0",
			"Type" : "String"
		}
    },
    "Mappings": {

    },
    "Conditions": {

    },
    "Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": { "Fn::Sub": "${VPCCIDR}/24" },
				"EnableDnsSupport": "True",
				"EnableDnsHostnames": "True",
				"InstanceTenancy": "default",
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["", [{
							"Ref": "AWS::StackName"
						}, "VPC"]]
					}
				}]
			}
        },
		"priva": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"MapPublicIpOnLaunch": "False",
				"AvailabilityZone": {
					"Fn::Select": ["0", {
						"Fn::GetAZs": {
							"Ref": "AWS::Region"
						}
					}]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": { "Fn::Select": [ 0, { "Fn::Cidr": [ { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] }, 4, 6 ] } ] },
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["", [{
							"Ref": "AWS::StackName"
						}, "PrivatePrimary"]]
					}
				}]
			}
		},
		"privb": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"MapPublicIpOnLaunch": "False",
				"AvailabilityZone": {
					"Fn::Select": ["1", {
						"Fn::GetAZs": {
							"Ref": "AWS::Region"
						}
					}]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": { "Fn::Select": [ 1, { "Fn::Cidr": [ { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] }, 4, 6 ] } ] },
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["", [{
							"Ref": "AWS::StackName"
						}, "PrivateSecondary"]]
					}
				}]
			}
		},
		"privrtb": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["", [{
							"Ref": "AWS::StackName"
						}, "PrivateRTB"]]
					}
				}]
			}
		},
		"privrtbassoca": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "priva"
				},
				"RouteTableId": {
					"Ref": "privrtb"
				}

			}
		},
		"privrtbassocb": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "privb"
				},
				"RouteTableId": {
					"Ref": "privrtb"
				}

			}
		},
		"ACL": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [

					{
						"Key": "Name",
						"Value": {
							"Fn::Join": ["", [{
								"Ref": "AWS::StackName"
							}, "ACL"]]
						}
					}
				]
			}
		},
		"acl1": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"CidrBlock": "0.0.0.0/0",
				"Egress": "True",
				"Protocol": "-1",
				"RuleAction": "allow",
				"RuleNumber": "100",
				"NetworkAclId": {
					"Ref": "ACL"
				}
			}
		},
		"acl2": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"CidrBlock": "0.0.0.0/0",
				"Protocol": "-1",
				"RuleAction": "allow",
				"RuleNumber": "100",
				"NetworkAclId": {
					"Ref": "ACL"
				}
			}
		},
		"aclpriva": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"NetworkAclId": {
					"Ref": "ACL"
				},
				"SubnetId": {
					"Ref": "priva"
				}
			}
		},
		"aclprivb": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"NetworkAclId": {
					"Ref": "ACL"
				},
				"SubnetId": {
					"Ref": "privb"
				}
			}
		},
		"PrivDNS": {
			"Type": "AWS::Route53::HostedZone",
			"Properties": {
				"Name": {
					"Ref": "domainName"
				},
				"VPCs": [{
					"VPCId": {
						"Ref": "VPC"
					},
					"VPCRegion": {
						"Ref": "AWS::Region"
					}
				}],
				"HostedZoneConfig": {
					"Comment": {
						"Fn::Join": ["", ["Private Hosted zone for ", {
							"Ref": "AWS::StackName"
						}]]
					}
				},
				"HostedZoneTags": [{
					"Key": "Name",
					"Value": {
						"Ref": "domainName"
					}
				}]
			}
		},
		"PubDNS": {
			"Type": "AWS::Route53::HostedZone",
			"Properties": {
				"Name": {
					"Ref": "domainName"
				},
				"HostedZoneConfig": {
					"Comment": {
						"Fn::Join": ["", ["Public Hosted zone for ", {
							"Ref": "AWS::StackName"
						}]]
					}
				},
				"HostedZoneTags": [{
					"Key": "Name",
					"Value": {
						"Ref": "domainName"
					}
				}]
			}
		},
		"S3Endpoint": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Properties": {
				"RouteTableIds": [{
					"Ref": "privrtb"
				}],
				"ServiceName": {
					"Fn::Join": ["", ["com.amazonaws.", {
						"Ref": "AWS::Region"
					}, ".s3"]]
				},
				"VpcId": {
					"Ref": "VPC"
				}
			}
		},
		"Ec2Endpoint": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Properties": {
                "VpcEndpointType": "Interface",
				"PrivateDnsEnabled" : "true",
				"ServiceName": {
					"Fn::Join": ["", ["com.amazonaws.", {
						"Ref": "AWS::Region"
					}, ".ec2"]]
				},
				"VpcId": {
					"Ref": "VPC"
				},
                "SubnetIds" : [
                    {
                        "Ref" : "priva"
                    },
                    {
                        "Ref" : "privb"
                    } 
                ],
                "SecurityGroupIds" : [
                    {
                        "Ref" : "endpointSG"
                    }
                ]
			}
		},
		"ssmEndpoint": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Properties": {
                "VpcEndpointType": "Interface",
				"PrivateDnsEnabled" : "true",
				"ServiceName": {
					"Fn::Join": ["", ["com.amazonaws.", {
						"Ref": "AWS::Region"
					}, ".ssm"]]
				},
				"VpcId": {
					"Ref": "VPC"
				},
                "SubnetIds" : [
                    {
                        "Ref" : "priva"
                    },
                    {
                        "Ref" : "privb"
                    } 
                ],
                "SecurityGroupIds" : [
                    {
                        "Ref" : "endpointSG"
                    }
                ]
			}
		},
		"ssmMessagesEndpoint": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Properties": {
                "VpcEndpointType": "Interface",
				"PrivateDnsEnabled" : "true",
				"ServiceName": {
					"Fn::Join": ["", ["com.amazonaws.", {
						"Ref": "AWS::Region"
					}, ".ssmmessages"]]
				},
				"VpcId": {
					"Ref": "VPC"
				},
                "SubnetIds" : [
                    {
                        "Ref" : "priva"
                    },
                    {
                        "Ref" : "privb"
                    } 
                ],
                "SecurityGroupIds" : [
                    {
                        "Ref" : "endpointSG"
                    }
                ]
			}
		},
		"puba": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"MapPublicIpOnLaunch": "True",
				"AvailabilityZone": {
					"Fn::Select": ["0", {
						"Fn::GetAZs": {
							"Ref": "AWS::Region"
						}
					}]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": { "Fn::Select": [ 2, { "Fn::Cidr": [ { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] }, 4, 6 ] } ] },
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["", [{
							"Ref": "AWS::StackName"
						}, "PublicPrimary"]]
					}
				}]
			}
		},
		"pubb": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"MapPublicIpOnLaunch": "True",
				"AvailabilityZone": {
					"Fn::Select": ["1", {
						"Fn::GetAZs": {
							"Ref": "AWS::Region"
						}
					}]
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": { "Fn::Select": [ 3, { "Fn::Cidr": [ { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] }, 4, 6 ] } ] },
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["", [{
							"Ref": "AWS::StackName"
						}, "PublicSecondary"]]
					}
				}]
			}
		},
		"IGW": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["", [{
							"Ref": "AWS::StackName"
						}, "IGW"]]
					}
				}]
			}
		},
		"NATEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"NAT": {
			"Type": "AWS::EC2::NatGateway",
			"DependsOn": ["NATEIP"],
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": ["NATEIP", "AllocationId"]
				},
				"SubnetId": {
					"Ref": "puba"
				}
			}
		},
		"privtoNAT": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "privrtb"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "NAT"
				}
			}
		},
		"IGWAssoc": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "IGW"
				}
			}
		},
		"pubrtb": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": ["", [{
							"Ref": "AWS::StackName"
						}, "PublicRTB"]]
					}
				}]
			}
		},

		"pubtoIGW": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "pubrtb"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "IGW"
				}
			}
		},
		"pubrtbassoca": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "puba"
				},
				"RouteTableId": {
					"Ref": "pubrtb"
				}

			}
		},
		"pubrtbassocb": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "pubb"
				},
				"RouteTableId": {
					"Ref": "pubrtb"
				}

			}
		},
		"aclpuba": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"NetworkAclId": {
					"Ref": "ACL"
				},
				"SubnetId": {
					"Ref": "puba"
				}
			}
		},
		"aclpubb": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"NetworkAclId": {
					"Ref": "ACL"
				},
				"SubnetId": {
					"Ref": "pubb"
				}
			}
		},
		"oracleHostRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                    "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"],
				"RoleName": {
					"Fn::Sub": "${AWS::StackName}-instance-role"
				}
			}
		},
		"oracleHostProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "oracleHostRole"
				}]
			}
		},
		"databaseSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": {
					"Fn::Sub": "${AWS::StackName}-dbSG"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"Description": "DB port from application",
					"FromPort": "1522",
					"ToPort": "1522",
					"SourceSecurityGroupId": {
						"Ref": "appSG"
					}
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"FromPort": "-1",
					"ToPort": "-1",
					"Description" : "Allow the database hosts to access resources wihtin the VPC",
					"CidrIp":{ "Fn::GetAtt" : [ "VPC", "CidrBlock" ] }
				}],
				"VpcId": { "Ref": "VPC" },
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-dbSG"
					}
				}]
			}
		},
		"appSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": {
					"Fn::Sub": "${AWS::StackName}-appSG"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"Description": "Allow the application port to be accessed from the Load Balancer",
					"FromPort": "8001",
					"ToPort": "8001",
					"SourceSecurityGroupId": {
						"Ref": "appLBSG"
					}
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"FromPort": "-1",
					"ToPort": "-1",
					"Description" : "Allow the application hosts to access resources wihtin the VPC",
					"CidrIp": { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] }
				}],
				"VpcId": { "Ref": "VPC" },
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-appSG"
					}
				}]
			}
		},
		"appLBSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": {
					"Fn::Sub": "${AWS::StackName}-appLBSG"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"Description": "Allow the load balancer to be accessed from anywhere",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp":  "0.0.0.0/0"
				},
				{
					"IpProtocol": "tcp",
					"Description": "Allow the load balancer to be accessed from anywhere",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp":  "0.0.0.0/0"
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"FromPort": "-1",
					"ToPort": "-1",
					"Description" : "Allow Load Balancer to use VPC resources",
					"CidrIp": { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] }
				}],
				"VpcId": { "Ref": "VPC" },
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-appLBSG"
					}
				}]
			}
		},
		"endpointSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": {
					"Fn::Sub": "${AWS::StackName}-endpointSG"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"Description": "DB port from application",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] }
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"FromPort": "-1",
					"ToPort": "-1",
					"CidrIp": { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] }
				}],
				"VpcId": { "Ref": "VPC" },
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${AWS::StackName}-endpointSG"
					}
				}]
			}
		},
		"databaseStorage": {
			"Type": "AWS::EC2::Volume",
			"Properties": {
				"Size": { "Ref" : "appStorage" },
				"Encrypted": "true",
				"VolumeType": "gp3",
				"AvailabilityZone": {
					"Fn::GetAtt": ["databaseHost1", "AvailabilityZone"]
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${hostnamePattern}_database"
					}
				}]
			}
		},
		"attachDatabaseStorage": {
			"Type": "AWS::EC2::VolumeAttachment",
			"Properties": {
				"InstanceId": {
					"Ref": "databaseHost1"
				},
				"VolumeId": {
					"Ref": "databaseStorage"
				},
				"Device": "/dev/sdf"
			}
		},
		"databaseHost1": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"KeyName": "cloudbldr-marketplace-london",
				"DisableApiTermination": "false",
				"SubnetId": {"Ref" : "priva"},
				"ImageId": {"Ref": "AMI"},
				"InstanceType": {"Ref": "dbSize"},
				"BlockDeviceMappings" : [{
                	"DeviceName" : "/dev/sda1",
                    "Ebs" : {
                    	"DeleteOnTermination" : "true",
                    	"VolumeType" : "gp2"
                	}
               	}],
				"Monitoring": "true",
				"IamInstanceProfile": { "Ref" : "oracleHostProfile"},
				"SecurityGroupIds": [ {"Ref" : "databaseSG"}],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${hostnamePattern}d1.${domainName}"
					}
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"#!/bin/bash -ex", "\n",
                                "sudo hostnamectl  set-hostname ", { "Fn::Sub": "${hostnamePattern}a1.${domainName}" },"\n",
								"sudo /usr/bin/echo \"127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\" > /etc/hosts", "\n",
								"sudo /usr/bin/echo \"`/usr/bin/hostname -I` ", { "Fn::Sub": "${hostnamePattern}a1" } ," ", { "Fn::Sub": "${hostnamePattern}a1.${domainName}" }, "\" >> /etc/hosts", "\n",
								"sudo /usr/sbin/mkfs -t ext4 /dev/$(/usr/bin/lsblk --fs  -o NAME,FSTYPE | /usr/bin/tail -n 1)", "\n",
								"sudo /usr/bin/echo \"UUID=$(/usr/sbin/blkid -s UUID -o value /dev/$(/usr/bin/lsblk --fs  -o NAME,FSTYPE | /usr/bin/tail -n 1))      /oracle/db      ext4    defaults        0 0\" >> /etc/fstab", "\n",
								"sudo /usr/bin/mount -a", "\n",
								"sudo /usr/bin/chown -R oracle:oinstall /oracle/db", "\n",
								"sudo /usr/bin/rm -rf /oracle/oraInvenory/*", "\n",
								"sudo /usr/sbin/reboot now", "\n"
							]
						]
					}
				}
			}
        },
		"applicationStorage": {
			"Type": "AWS::EC2::Volume",
			"Properties": {
				"Size": { "Ref" : "appStorage" },
				"Encrypted": "true",
				"VolumeType": "gp3",
				"AvailabilityZone": {
					"Fn::GetAtt": ["appHost1", "AvailabilityZone"]
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${hostnamePattern}_application"
					}
				}]
			}
		},
		"attachApplicationStorage": {
			"Type": "AWS::EC2::VolumeAttachment",
			"Properties": {
				"InstanceId": {
					"Ref": "appHost1"
				},
				"VolumeId": {
					"Ref": "applicationStorage"
				},
				"Device": "/dev/sdf"
			}
		},
		"appHost1": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"KeyName": "cloudbldr-marketplace-london",
				"DisableApiTermination": "false",
				"SubnetId": {"Ref" : "priva"},
				"ImageId": {"Ref": "AMI"},
				"InstanceType": {"Ref": "appSize"},
				"BlockDeviceMappings" : [{
                	"DeviceName" : "/dev/sda1",
                    "Ebs" : {
                    	"DeleteOnTermination" : "true",
                    	"VolumeType" : "gp2"
                	}
               	}],
				"Monitoring": "true",
				"IamInstanceProfile": { "Ref" : "oracleHostProfile"},
				"SecurityGroupIds": [ {"Ref" : "appSG"}],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Sub": "${hostnamePattern}a1.${domainName}"
					}
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"#!/bin/bash -ex", "\n",
                                "sudo /usr/bin/hostnamectl  set-hostname ", { "Fn::Sub": "${hostnamePattern}a1.${domainName}" }, "\n",
								"sudo /usr/bin/echo \"127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\" > /etc/hosts", "\n",
								"sudo /usr/bin/echo \"`/usr/bin/hostname -I` ", { "Fn::Sub": "${hostnamePattern}a1" } ," ", { "Fn::Sub": "${hostnamePattern}a1.${domainName}" }, "\" >> /etc/hosts", "\n",
								"sudo /usr/sbin/mkfs -t ext4 /dev/$(/usr/bin/lsblk --fs  -o NAME,FSTYPE | /usr/bin/tail -n 1)", "\n",
								"sudo /usr/bin/echo \"UUID=$(/usr/sbin/blkid -s UUID -o value /dev/$(/usr/bin/lsblk --fs  -o NAME,FSTYPE | /usr/bin/tail -n 1))      /oracle/app      ext4    defaults        0 0\" >> /etc/fstab", "\n",
								"sudo /usr/bin/mount -a", "\n",
								"sudo /usr/bin/chown -R oracle:oinstall /oracle/app", "\n",
								"sudo /usr/bin/rm -rf /oracle/oraInvenory/*", "\n",
								"sudo /usr/sbin/reboot now", "\n"
							]
						]
					}
				}
			}
        },
		"databaseHost1PrivateDNSEntry": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
              "Name": { "Fn::Sub": "${hostnamePattern}d1.${domainName}" },
              "Type": "A",
              "ResourceRecords": [
                {
                    "Fn::GetAtt": ["databaseHost1", "PrivateIp"]
                }
              ],
              "Comment": "DNS record for Database Tier Instance",
              "HostedZoneId": {
                "Ref" : "PrivDNS"
              },
              "TTL": "300"
            }
          },
		  "appHost1PrivateDNSEntry": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
              "Name": { "Fn::Sub": "${hostnamePattern}a1.${domainName}" },
              "Type": "A",
              "ResourceRecords": [
                {
                    "Fn::GetAtt": ["databaseHost1", "PrivateIp"]
                }
              ],
              "Comment": "DNS record for Application Tier Instance",
              "HostedZoneId": {
                "Ref" : "PrivDNS"
              },
              "TTL": "300"
            }
          },
			"appLoadBalancer": {
				"Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
				"Properties" : {
					"Name" : {
						"Fn::Sub": "${hostnamePattern}-LB"
					},
					"Subnets" : [{ "Ref" : "puba" }, { "Ref" : "pubb" }],
					"SecurityGroups" : [ {"Ref" : "appLBSG"} ],
					"Tags" : [ { "Key" : "Name", "Value" : {
						"Fn::Sub": "${hostnamePattern}.${domainName}"
					}} ]
				}
			},
			"appLoadBalancerListener": {
				"Type" : "AWS::ElasticLoadBalancingV2::Listener",
				"Properties" : {
					"LoadBalancerArn" : { "Ref" : "appLoadBalancer" },
					"Port" : 80,
					"Protocol" : "HTTP",
					"DefaultActions" : [ {
						"Type" : "forward",
						"TargetGroupArn" : { "Ref" : "appLoadBalancerTargetGroup" }
					} ]
				}
			},
			"appLoadBalancerTargetGroup" : {
				"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
				"Properties" : {
					"Name" : {
						"Fn::Sub": "${hostnamePattern}-TG"
					},
					"VpcId" : { "Ref" : "VPC" },
					"Port" : "8001",
					"Protocol" : "HTTP",
					"TargetGroupAttributes" : [ { "Key" : "stickiness.enabled", "Value" : true }, { "Key" : "stickiness.type", "Value" : "lb_cookie" } ],
					"Targets" : [ { "Id" : { "Ref" : "appHost1" } ,  "Port" : "8001" } ]
				}
			},
			"appLoadBalancerPublicDNS": {
				"Type": "AWS::Route53::RecordSet",
				"Properties": {
				  "Name": { "Fn::Sub": "${hostnamePattern}.${domainName}" },
				  "Type": "A",
				  "AliasTarget": {
						"DNSName" : { "Fn::GetAtt" : ["appLoadBalancer","DNSName"] },
						"HostedZoneId" : { "Fn::GetAtt" : ["appLoadBalancer", "CanonicalHostedZoneID"] },
						"EvaluateTargetHealth": false
					},
				  "Comment": "DNS record for Load Balancer",
				  "HostedZoneId": {
					"Ref" : "PubDNS"
				  }
				}
			  }

    },
    "Outputs": {

    }
}